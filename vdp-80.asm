	ORG 0D800H
;
; Entry point of ROM of the IMSAI VDP-80
; This code is mapped at 0000H and executed
; It changes the mapping and boots the monitor
;
LOAD:
	MVI A,40H
	OUT 0F3H	; Mem mapping?
	JMP 0D810H
	JMP 0DE3BH
	JMP 0DE66H
	JMP 0D9EFH
;
; Boot procedure
;
BOOT:
	LXI SP,0D0E4H	; Init stack
	LXI H,80H
	SHLD 0D0FEH
	CALL 0D87BH
	DCR A
	JZ 0D8A7H
	XRA A	; No output
	STA 0D0F7H
	LXI H,0FFFDH
	MVI A,56H
	CMP M	; FFFD='V'?
	JNZ 0D83CH
	INX H
	MVI A,49H
	CMP M	; FFFE='I'?
	JNZ 0D83CH
	MVI A,10H
	STA 0D0F7H
	CALL 0F800H
SKIP:
	LXI H,0D0FAH
	SHLD 0D0F8H
	MVI A,0AEH
	OUT 3
	MVI A,27H
	OUT 3
	CALL 0D8AEH
	LXI H,0DFA7H
	CALL 0DE59H	; Print monitor welcome string
;
; Reset stack and enter monitor
;
MONRESET:
	LXI SP,0D0E4H
;
; Standard monitor entry point
;
MONENTRY:
	LXI H,0D856H	; Monitor entry point
	PUSH H	; RET will return at MONENTRY
	CALL 0DEB5H
	MVI A,3FH	; '?'
	CALL 0DE66H	; Prints '?'
	CALL 0DE3BH
	LXI H,0DF44H
LOOKUPJMP:
	CALL 0DE8AH	; Look up for A and jump to address in the table
	CALL 0DDE1H
	RZ	; Not found
	CALL 0DEDBH
	MVI B,1
	PCHL	; Exec jump table
;
; ':' command.
; Use a different jump table for :D, :I and :O
;
CMD_COLON:
	LXI H,0DF95H
	JMP 0D868H
LD87B:
	CALL 0DCCAH
	LXI H,0D0F5H
	LDA 0E7FDH
	SUI 44H	; 'D'
	JNZ 0D891H
	LDA 0E7FEH
	SUI 49H	; 'I'
	JZ 0D896H
LD891:
	MVI M,4
	JMP 0DCECH
LD896:
	CALL 0E00CH
	MVI M,2
	CALL 0DCECH
	RP
	LXI H,0D0F5H
	MVI M,1
	JMP 0DCECH
;
; Reset memory mapping and jumps to 0x0000
;
REBOOT:
	MVI A,0C0H
	OUT 0F3H	; Restore mapping
	JMP 0
LD8AE:
	IN 14H
LD8B0:
	LXI H,0DFC7H
	CALL 0DE59H
	LXI H,0D0F7H
	MVI A,10H
	ANA M
	MOV M,A
	DCX H
	XRA A
	MOV M,A
	CALL 0D953H
	MVI B,0
	IN 12H
	ORA A
	JZ 0D8CCH
	INR B
LD8CC:
	CALL 0DE05H
	JNZ 0D920H
	CALL 0DDFDH
	JNZ 0D931H
	MOV A,B
	ORA A
	JZ 0D8CCH
	CALL 0DDF5H
	JZ 0D8CCH
LD8E3:
	INR A
	JZ 0D8CCH
	MVI B,0
LD8E9:
	CALL 0DDF5H
	JZ 0D8E9H
	INR B
	ORA A
	JZ 0D8E9H
	LXI H,0DF1EH
LD8F7:
	INX H
	MOV A,M
	ORA A
	JZ 0D8B0H
	CMP B
	INX H
	JC 0D8F7H
	MOV A,M
	PUSH PSW
	CALL 0D98CH
	MVI B,1
	CALL 0D948H
	POP PSW
	MOV H,A
	MVI L,0
	CPI 1
	JNZ 0D917H
	MVI L,10H
LD917:
	CALL 0DED3H
	LXI H,0DFE4H
	JMP 0DE59H
LD920:
	MVI B,2
	CALL 0D948H
	RAR
	RAR
	RAR
	ANA B
	XRA M
	MOV M,A
	LXI H,0DFF2H
	JMP 0DE59H
LD931:
	MOV C,A
	IN 12H
	CMP C
	JZ 0D8E3H
	IN 14H
	CMP C
	JZ 0D920H
	MOV A,C
	ANI 7FH
	CPI 20H
	JNZ 0D8CCH
	MVI B,4
;
; Adds a device for input and output
;
USE_DEVICE:
	LXI H,0D0F6H
	MOV A,M
	ORA B
	MOV M,A
	INX H
	MOV A,M
	ORA B
	MOV M,A
	RET
LD953:
	LXI H,42H
	CALL 0D9A0H
	CALL 0D977H
	MVI A,4CH
	OUT 13H
	MVI A,0FFH
	OUT 13H
	OUT 13H
	MVI A,0B7H
	OUT 13H
	RET
LD96B:
	CALL 0D977H
	MVI A,0AEH
	OUT 13H
	MVI A,37H
	OUT 13H
	RET
LD977:
	XRA A
	OUT 13H
	OUT 13H
	OUT 13H
	MVI A,40H
	OUT 13H
	RET
CMD_Z:
	CALL 0DEE0H
	MOV A,H
	ORA L
	JZ 0D8B0H	; HL == 0?
	MOV A,H
LD98C:
	LXI H,0DF2EH
	PUSH B
	CALL 0DDE1H
	POP B
	CNZ 0D9A0H
	JNZ 0D96BH
	LXI H,0DFD7H
	JMP 0DE59H
LD9A0:
	LXI D,0D103H
	XCHG
	MVI M,36H
	LXI H,0D100H	; Store prev HL in d100
	MOV M,E
	MOV M,D
	RET
CMD_J:
	POP D
CMD_C:
	CALL 0DEE0H
	PCHL
CMD_K:
	CALL 0DEE0H
	MVI A,0C0H
	OUT 0F3H
	PCHL
CMD_Q:
	LDA 0D0F7H
	ANI 10H
	RZ
	MVI A,0C0H
	OUT 0F3H
	JMP 0F806H
CMD_E:
	CALL 0DEE0H
EDIT_LOOP:
	CALL 0DEB5H
	CALL 0DED3H
	CALL 0D9E0H
	DCX H
	CPI 0AH	; LF
	RZ
	CPI 2DH	; '-'
	JZ 0D9C9H
	INX H
	INX H
	JMP 0D9C9H
PRT_READ_HEX2:
	MOV A,M
	MOV E,A
	CALL 0DED8H
	XCHG
	CALL 0DEE3H
	XCHG
	MOV M,E
	RET
CMD_D:
	CALL 0DDAFH
LD9EF:
	MVI E,18H	; 24 (lines?)
	PUSH H
LD9F2:
	MOV D,E
LD9F3:
	PUSH D
	MVI D,11H
	LXI H,0D0F5H
	XRA A
LD9FA:
	DCX H
	MOV M,A
	DCR D
	JNZ 0D9FAH
	POP D
	XTHL
	CALL 0DEB5H
	CALL 0DED3H
	CALL 0DEDBH
LDA0B:
	CALL 0DE3BH
	JNZ 0DA4FH
	MOV A,M
	CALL 0DED8H
	MOV A,M
	INX H
	XTHL
	MOV M,A
	CPI 20H
	JC 0DA23H
	CPI 7FH
	JC 0DA25H
LDA23:
	MVI M,2EH
LDA25:
	INX H
	DCX B
	MOV A,B
	ORA C
	JZ 0DA34H
	XTHL
	MOV A,L
	ANI 0FH
	JNZ 0DA0BH
	XTHL
LDA34:
	CALL 0DEDBH
	LXI H,0D0E4H
	CALL 0DE59H
	MOV A,B
	ORA C
	JZ 0DA4FH
	DCR D
	JNZ 0D9F3H
	CALL 0DE34H
	CALL 0DEB5H
	JMP 0D9F2H
LDA4F:
	POP H
	JMP 0DEB5H
CMD_P:
	INR B
CMD_U:
	CALL 0DDBCH
	MOV A,D
	ANI 0FCH
	ORA B
	MOV D,A
	MOV A,H
	ANI 0FCH
	ORA B
LDA60:
	OUT 0FEH
	CMP D
	RZ
	ADI 4
	JMP 0DA60H
CMD_H:
	CALL 0DE8AH
	SUI 3AH
	JNZ 0DA69H
	MOV D,A
	CALL 0DA96H
	RZ
	MOV B,E
	CALL 0DA96H
	MOV H,E
	CALL 0DA96H
	MOV L,E
	CALL 0DA96H
LDA82:
	CALL 0DA96H
	MOV M,E
	INX H
	DCR B
	JNZ 0DA82H
	CALL 0DA96H
	JZ 0DA69H
	MVI A,43H	; 'C'
	JMP 0DE66H
LDA96:
	CALL 0DE8AH
	CALL 0DEF9H
	JC 0DB8BH
	ADD A
	ADD A
	ADD A
	ADD A
	MOV E,A
	CALL 0DE8AH
	CALL 0DEF9H
	JC 0DB8BH
	ADD E
	MOV E,A
	ADD D
	MOV D,A
	RET
CMD_T:
	CALL 0DDAFH
	DCX B
LDAB6:
	XRA A
	MOV D,M
LDAB8:
	MOV M,A
	CMP M
	JNZ 0DACEH
	DCR A
	JNZ 0DAB8H
	MOV M,D
	CALL 0DE3BH
	RNZ
	INX H
	DCX B
	MOV A,B
	ORA C
	JNZ 0DAB6H
	RET
LDACE:
	INX H
	MOV E,A
	CALL 0DF12H
	MOV A,E
	JMP 0DF0EH
CMD_M:
	CALL 0DDD2H
LDADA:
	JMP 0DB5EH
CMD_F:
	CALL 0DDD2H
	MOV A,E
	MOV M,A
	DCX B
	MOV D,H
	MOV E,L
	INX D
	JMP 0DADAH
CMD_I:
	DCR B
CMD_O:
	CALL 0DDD8H
	MOV A,B
	RLC
	RLC
	RLC
	XRI 0DBH	; %1101 1011
	MOV D,L
	LHLD 0D0F8H
	MOV M,A
	CMP M
	RNZ
	PUSH H	; Will call there
	INX H
	MOV M,D
	INX H
	MVI M,0C9H	; C9 = RET
	LXI H,0DB08H
	XTHL
	MOV A,B
	ORA A
	MOV A,E
	PCHL
RETADRS:
	JZ 0DED8H
	RET
CMD_Y:
	CALL 0DEE0H
	MOV A,H
	ORA L
	JNZ 0DB17H
	LXI H,0D0FAH
LDB17:
	SHLD 0D0F8H
	RET
CMD_V:
	CALL 0DDD2H
LDB1E:
	LDAX D
	CMP M
	INX H
	INX D
	JZ 0DB2DH
	CALL 0DF12H
	XCHG
	CALL 0DF15H
	XCHG
LDB2D:
	DCX B
	MOV A,B
	ORA C
	RZ
	CALL 0DE3BH
	RNZ
	JMP 0DB1EH
CMD_S:
	CALL 0DDD2H
	PUSH H
	LXI H,0FFFFH
	CPI 0AH
	CNZ 0DEE0H
	XTHL
LDB45:
	MOV A,M
	XTHL
	ANA H
	CMP D
	XTHL
	INX H
	JNZ 0DB56H
	MOV A,M
	XTHL
	ANA L
	CMP E
	XTHL
	CZ 0DF0AH
LDB56:
	DCX B
	MOV A,B
	ORA C
	JNZ 0DB45H
	POP B
	RET
LDB5E:
	MOV A,B
	ORA C
	RZ
	MOV A,M
	STAX D
	DCX B
	INX H
	INX D
	JMP 0DB5EH
CMD_X:
	DCR B
CMD_L:
	PUSH B
	CALL 0DDBCH
	MOV A,D
	ORA E
	JZ 0DB85H
	PUSH H
	PUSH D
	CALL 0DEE0H
	PUSH H
	CALL 0DBE7H
	JNZ 0DB93H
	POP PSW
	POP PSW
	POP PSW
	JMP 0DB93H
LDB85:
	CALL 0DBE7H
LDB88:
	JZ 0DB93H
LDB8B:
	MVI A,54H	; Prints 'T'
;
; Prints a char and jump to monitor
;
PRT_THEN_MON:
	CALL 0DE66H
	JMP 0D856H
LDB93:
	POP B
	POP H
	POP D
	PUSH B
	PUSH H
	PUSH D
	MOV A,L
	SUB E
	MOV L,A
	MOV A,H
	SBB D
	MOV H,A
	DAD H
	MOV C,H
	INR C
LDBA2:
	CALL 0DC43H
	CPI 81H
	JNZ 0DB88H
	CALL 0DC43H
	MOV B,A
	LXI H,0
LDBB1:
	CALL 0DC53H
	STAX D
	INX D
	DCR B
	JNZ 0DBB1H
	PUSH D
	XCHG
	CALL 0DC8AH
	MOV H,L
	MOV L,A
	DAD D
	MOV A,H
	ORA L
	MVI A,43H
	CNZ 0DE66H	; Prints 'C'
	JNZ 0DBD1H
	MVI A,2AH
	CALL 0DE66H	; Prints '*'
LDBD1:
	POP D
	DCR C
	JNZ 0DBA2H
	CALL 0DEB5H
	MVI C,3
LDBDB:
	POP H
	CALL 0DED3H
	DCR C
	JNZ 0DBDBH
	POP PSW
	RAR
	RC
	PCHL
	CALL 0DC0FH
	CALL 0DC43H
	CPI 1
	RNZ
	CALL 0DC43H
	MVI C,5
LDBF5:
	CALL 0DC43H
	CALL 0DE66H
	DCR C
	JNZ 0DBF5H
	MVI C,3
LDC01:
	CALL 0DC8AH
	XTHL
	PUSH H
	DCR C
	JNZ 0DC01H
	CALL 0DC8AH
	XRA A
	RET
LDC0F:
	CALL 0DC79H
	MVI B,1FH
LDC14:
	CALL 0DC43H
	CPI 0E6H
	MVI A,49H	; Prints 'I'
	JNZ 0DB8DH	; Prints 'I', the input char and goes to monitor 
	DCR B
	JNZ 0DC14H
	RET
LDC23:
	PUSH PSW
LDC24:
	IN 3
	ANI 4
	JZ 0DC24H
	POP PSW
	OUT 0
	RET
CMD_G:
	CALL 0DEE0H
	MVI A,10H
	OUT 3
LDC36:
	MVI A,0E6H
	CALL 0DC23H
	IN 3
	ANI 2
	RNZ
	JMP 0DC36H
LDC43:
	CALL 0DE3BH
	JNZ 0D853H
	IN 3
	CPI 4
	JZ 0DC43H
	IN 0
	RET
LDC53:
	CALL 0DC43H
	PUSH B
	MOV C,A
	MVI B,0
	DAD B
	POP B
	RET
CMD_A:
	CALL 0DE8AH
	CALL 0DC79H
LDC63:
	LXI H,0F000H
	LXI D,1E1H
LDC69:
	DCX D
	MOV A,D
	ORA E
	JZ 0DC63H
	MVI M,7FH
	CALL 0DC43H
	MOV M,A
	INX H
	JMP 0DC69H
LDC79:
	MVI A,60H
	OUT 3
LDC7D:
	CALL 0DC43H
	CPI 0E6H
	JNZ 0DC7DH
	MVI A,20H
	OUT 3
	RET
LDC8A:
	CALL 0DC43H
	MOV L,A
	CALL 0DC43H
	MOV H,A
	RET
CMD_B:
	CALL 0DEB5H
	CALL 0D87BH
	DCR A
	JZ 0D8A7H
LDC9D:
	ANI 0F0H
	LXI H,0DCB5H
	CPI 0A0H
	JZ 0DE59H
	LXI H,0DCBFH
	CALL 0DE59H
	LHLD 0D0FEH
	INX H
	MOV A,M
	JMP 0DEBFH
STRNOTREADY:
	DB "NOT READY",0
STRDISKERR:
	DB "DISK ERR- ",0
INIT_d0ec:
	LXI H,0D0ECH
	MVI B,8
LOOP:
	DCX H
	MVI M,0
	DCR B
	JNZ 0DCCFH
	MVI M,21H
	MVI A,1
	STA 0D0E8H
	RET
CMD_N:
	CALL 0DEE0H
	MOV A,H
	ORA L
	JNZ 0DCE8H
	MVI L,80H
LDCE8:
	SHLD 0D0FEH
	RET
LDCEC:
	LHLD 0D0FEH
	LXI D,0D0E4H
	MVI B,7
LOOP_944:
	XCHG
	MOV A,M
	XCHG
	MOV M,A
	INX H
	INX D
	DCR B
	JNZ 0DCF4H
	MVI A,10H
	CALL 0DD73H
	LHLD 0D0FEH
	MOV A,L
	CALL 0DD73H
	MOV A,H
	CALL 0DD73H
	XRA A
	CALL 0DD73H
	LXI D,0
	MVI B,2
	LHLD 0D0FEH
	INX H
LDD1B:
	MOV A,M
	ORA A
	RNZ
	DCR D
	JNZ 0DD1BH
	DCR E
	JNZ 0DD1BH
	DCR B
	JNZ 0DD1BH
	RET
CMD_R:
	CALL 0DCCAH
	JMP 0DD36H
CMD_W:
	CALL 0DCCAH
	MVI M,11H
CMD_RW:
	CALL 0DDD8H
	STA 0D0FDH
	MOV A,L
	ORA E
	JZ 0DD8FH
	SHLD 0D0E7H
	MOV A,E
	STA 0D0E8H
	LDA 0D0FDH
	CPI 0AH
	JZ 0DD6BH
	CALL 0DDD8H
	SHLD 0D0E9H
	MOV A,E
	ANI 3
	INR A
	MOV E,A
	XRA A
	STC
LDD5D:
	RAL
	DCR E
	JNZ 0DD5DH
	MOV E,A
	LXI H,0D0E4H
	MOV A,M
	ANI 0F0H
	ORA E
	MOV M,A
LDD6B:
	CALL 0DCECH
	DCR A
	RZ
	JMP 0DC9DH
LDD73:
	STA 0D0FDH
	LDA 0D0F5H
	CPI 4
	JNZ 0DD84H
	LDA 0D0FDH
	OUT 0FDH
	RET
LDD84:
	CPI 2
	LDA 0D0FDH
	JZ 0E006H
	JMP 0E009H
;
; Prints 
;
PRINVALID:
	LXI H,0DD95H
	JMP 0DE59H
STRINVALID:
	DB "INVALID",0
CMD_XD:
	LXI H,0D0F5H
	JMP 0D9E0H
CMD_XI:
	LXI H,0D0F6H
	JMP 0D9E0H
CMD_XO:
	LXI H,0D0F7H
	JMP 0D9E0H
LDDAF:
	CALL 0DDBCH
	PUSH PSW	; Save result of read HEX (Z if ok?)
	MOV A,E
	SUB L
	MOV C,A
	MOV A,D
	SBB H
	MOV B,A
	INX B
	POP PSW	; Restore result of read HEX
	RET
READ_HEX_HL_DE:
	CALL 0DEE0H
	MOV D,H
	MOV E,L	; DE defaults to HL
LDDC1:
	CPI 0AH	; LF
	RZ	; HL = HEX4
	CPI 20H	; ' '
	JZ 0DDCCH
	CPI 2CH	; '~' => re-read DE
	RNZ	; Prob 'error'
READ_HEX_DE:
	XCHG
	CALL 0DEE0H
	XCHG
	RET	; HL = HEX4, DE = HEX4
LDDD2:
	CALL 0DDAFH
	JMP 0DDCCH
READ_HEX_HL_DE0:
	CALL 0DEE0H
	LXI D,0	; DE defaults to 0000
	JMP 0DDC1H
TABLOOKUPA:
	MOV B,A
NEXT_ENTRY:
	MOV A,M
	ORA A
	RZ	; End of table
	CMP B
	INX H
	JZ 0DDEFH	; Found
	INX H
	INX H
	JMP 0DDE2H	; Next adrs
FOUND:
	MOV B,M
	INX H
	MOV H,M
	MOV L,B
	ORA A	; Sets NZ
	RET
READ_FROM_A:
	IN 13H
	ANI 2
	RZ
	IN 12H
	RET
READ_FROM_C:
	IN 3
	ANI 2
	RZ
	IN 2
	RET
READ_FROM_B:
	IN 15H
	ANI 2
	RZ
	IN 14H
	RET
WRITE_TO_A:
	IN 13H
	ANI 1
	JZ 0DE0DH
	LDA 0D0FDH
	OUT 12H
	RET
WRITE_TO_C:
	IN 3
	ANI 1
	JZ 0DE1AH
	LDA 0D0FDH
	OUT 2
	RET
WRITE_TO_B:
	IN 15H
	ANI 1
	JZ 0DE27H
	LDA 0D0FDH
	OUT 2
	RET
;
; Reads a character until one is available
;
WAIT_CHAR:
	CALL 0DE3BH
	JZ 0DE34H
	RET
;
; Reads one character from the current input device
; Does not wait, returns 0 if no chars
;
READ_CHAR:
	LDA 0D0F6H	; READ_CHAR
	ANI 2
	CNZ 0DE05H
	RNZ
	LDA 0D0F6H
	ANI 4
	CNZ 0DDFDH
	RNZ
	LDA 0D0F6H
	ANI 1
	CNZ 0DDF5H
	RET
	CALL 0DEB5H
;
; Prints zero-terminated string
; pointed to by HL
;
PRINTSTR:
	MOV A,M
	ORA A
	RZ
	PUSH B
	MOV B,A
	CALL 0DE66H
	POP B
	INX H
	JMP 0DE59H
;
; Print one character on the current output device
;
PRTCHAR:
	STA 0D0FDH
	PUSH H
	LXI H,0D0F7H
	MOV A,M
	ANI 1
	CNZ 0DE0DH
	MOV A,M
	ANI 2
	CNZ 0DE27H
	MOV A,M
	ANI 4
	CNZ 0DE1AH
	MOV A,M
	ANI 10H
	LDA 0D0FDH
	CNZ 0F803H
	POP H
	RET
;
; Reads one character (uppercase)
; Reset monitor if ^C (or ^U)
; (ESC management unclear)
;
READCHR_CTRC:
	CALL 0DE34H
	ANI 7FH
	CPI 0DH	; CR?
	JZ 0DEB5H
	CPI 3	; ^C?
	JZ 0D853H
	CPI 15H	; ^U?
	JZ 0D853H
	CALL 0DE66H
	CPI 1BH	; ESC?
	JNZ 0DEACH
	CALL 0DE8AH	; ESC
	JMP 0DE8AH	; Again
;
; Makes lowercase characters uppercase
; Others unchanged
;
TOUPPER:
	CPI 61H
	RC	; Return if <'a'
	CPI 7BH
	RNC	; Return if >'Z'
	XRI 20H	; Make uppercase
	RET
;
; Prints a carriage return and a line feed
;
PRTCRLF:
	MVI A,0DH
	CALL 0DE66H
	MVI A,0AH
	JMP 0DE66H
;
; Prints 2 digits hex number
;
PRTHEX2:
	PUSH PSW	; Print hex number 2 digits
	RRC
	RRC
	RRC
	RRC
	CALL 0DEC8H
	POP PSW
;
; Prints single digit hex number
;
PRTHEX1:
	ANI 0FH	; Print hex digit
	ADI 90H
	DAA
	ACI 40H
	DAA
	JMP 0DE66H
;
; Prints HL as 4 hex digits
; followed by a space
;
PRTHEX4SPC:
	MOV A,H
	CALL 0DEBFH
	MOV A,L
;
; Prints 2 digits hexadecimal
; followed by a space
;
PRTHEX2SPC:
	CALL 0DEBFH
;
; Prints a space
;
PRTSPACE:
	MVI A,20H
	JMP 0DE66H	; Print ' '
READ_HEXHL_0:
	LXI H,0
READ_HEX_HL:
	CALL 0DE8AH
	PUSH PSW
	CALL 0DEF9H
	JNC 0DEEFH
	POP PSW
	RET
APPENDHEX:
	DAD H
	DAD H
	DAD H
	DAD H	; HL << 4
	ADD L
	MOV L,A	; HL << 4 | A
	POP PSW
	JMP 0DEE3H
HEXFROMASCII:
	SUI 30H	; '0'
	RC
	CPI 0AH	; <= '9'
	JC 0DF08H
	SUI 11H
	RC	; > 'F'
	ADI 0AH
	CPI 10H
DONE:
	CMC	; C = 0
	RET	; A = 0..F
LDF0A:
	CALL 0DF12H
	MOV A,M
LDF0E:
	CALL 0DEBFH
	RET
DUMP_EOL:
	CALL 0DEB5H
DUMP_BOL:
	DCX H
	CALL 0DED3H	; Print address
	MOV A,M
	CALL 0DED8H	; And content
	INX H
	RET
XXX:
	DB 3,96H,6,48H,0BH,24H,17H,12H
	DB 2EH,6,5EH,3,0FFH,1,0
BAUD_TABLE:
	DB 96H	; 9600 bauds
DDF2F:
	DW 0DH
DDF31:
	DB 1	; 150 bauds
DDF32:
	DW 470H
DDF34:
	DB 3	; 300 bauds
DDF35:
	DW 1A0H
DDF37:
	DB 48H	; 4800 bauds
DDF38:
	DW 1AH
DDF3A:
	DB 24H	; 2400 bauds
DDF3B:
	DW 34H
DDF3D:
	DB 12H	; 1200 bauds
DDF3E:
	DW 68H
DDF40:
	DB 6	; 600 bauds
DDF41:
	DW 0D0H
DDF43:
	DB 0	; End of table
JUMPTABLE5:
	DB 41H	; 'A'
DDF45:
	DW 0DC5DH
DDF47:
	DB 42H	; 'B'
DDF48:
	DW 0DC93H
DDF4A:
	DB 43H	; 'C'
DDF4B:
	DW 0D9ADH
DDF4D:
	DB 44H	; 'D'
DDF4E:
	DW 0D9ECH
DDF50:
	DB 45H	; 'E'
DDF51:
	DW 0D9C6H
DDF53:
	DB 46H	; 'F'
DDF54:
	DW 0DADDH
DDF56:
	DB 47H	; 'G'
DDF57:
	DW 0DC2FH
DDF59:
	DB 48H	; 'H'
DDF5A:
	DW 0DA69H
DDF5C:
	DB 49H	; 'I'
DDF5D:
	DW 0DAE9H
DDF5F:
	DB 4AH	; 'J'
DDF60:
	DW 0D9ACH
DDF62:
	DB 4BH	; 'K'
DDF63:
	DW 0D9B1H
DDF65:
	DB 4CH	; 'L'
DDF66:
	DW 0DB6AH
DDF68:
	DB 4DH	; 'M'
DDF69:
	DW 0DAD7H
DDF6B:
	DB 4EH	; 'N'
DDF6C:
	DW 0DCDEH
DDF6E:
	DB 4FH	; 'O'
DDF6F:
	DW 0DAEAH
DDF71:
	DB 50H	; 'P'
DDF72:
	DW 0DA53H
DDF74:
	DB 51H	; 'Q'
DDF75:
	DW 0D9B9H
DDF77:
	DB 52H	; 'R'
DDF78:
	DW 0DD2BH
DDF7A:
	DB 53H	; 'S'
DDF7B:
	DW 0DB38H
DDF7D:
	DB 54H	; 'T'
DDF7E:
	DW 0DAB2H
DDF80:
	DB 55H	; 'U'
DDF81:
	DW 0DA54H
DDF83:
	DB 56H	; 'V'
DDF84:
	DW 0DB1BH
DDF86:
	DB 57H	; 'W'
DDF87:
	DW 0DD31H
DDF89:
	DB 58H	; 'X'
DDF8A:
	DW 0DB69H
DDF8C:
	DB 59H	; 'Y'
DDF8D:
	DW 0DB0CH
DDF8F:
	DB 5AH	; 'Z'
DDF90:
	DW 0D983H
DDF92:
	DB 3AH	; ':'
DDF93:
	DW 0D875H
TABLEX:
	DB 44H	; 'D'
DDF96:
	DW 0DD9DH
	DB 49H	; 'I'
DDF99:
	DW 0DDA3H
	DB 4FH	; 'O'
DDF9C:
	DW 0DDA9H
	DB 0	; End of list
COPYRIGHT:
	DB 28H,43H,29H,31H,39H,37H,38H,20H
IMSAI:
	DB "IMSAI MPU-B MONITOR    VERS 1.3",0
HITSPACE:
	DB "HIT SPACE BAR",0DH,0AH,0
INVALIDBAUD:
	DB "INVALID BAUD",0
BAUDSERIAL:
	DB "BAUD SERIAL",0DH,0AH,0
PARALLEL:
	DB "PARALLEL",0DH,0AH,0
END:
	DB 0,42H,23H
	END
